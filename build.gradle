buildscript {
	ext {
		springBootVersion = '2.0.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}



apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
//apply plugin: 'idea'
//apply plugin: 'net.ltgt.apt'


group = 'com.aineko'
version = '1.0.0'
sourceCompatibility = 11

repositories {
	mavenCentral()
}



dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-jooq')
	//compile('org.springframework.boot:spring-boot-starter-log4j2')
	//compile('org.springframework.boot:spring-boot-starter-security')
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('javax.xml.bind:jaxb-api:2.3.0')
	compile('org.springframework.retry:spring-retry')
	compile('org.postgresql:postgresql')
	compile 'org.javassist:javassist:3.25.0-GA'
	//compile('org.apache.logging.log4j:log4j-core:2.12.0')
	//compile('org.apache.logging.log4j:log4j-api:2.12.0')
	runtime('com.h2database:h2')
	compileOnly('org.projectlombok:lombok:1.18.2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
	testCompile('org.springframework.security:spring-security-test')
	testCompile('io.rest-assured:rest-assured:3.1.0')
	testCompile("org.assertj:assertj-core:3.10.0")
	testCompile('io.rest-assured:json-path:3.1.0')
}



springBoot {
    mainClassName = 'com.aineko.settings.SettingsApplication'
}


sourceSets {
	itest {
		compileClasspath += sourceSets.main.output + configurations.testCompile
		runtimeClasspath += output + compileClasspath + configurations.testRuntime
	}
}

//idea {
//	module {
//		testSourceDirs += sourceSets.integrationTest.java.srcDirs
//		testResourceDirs += sourceSets.integrationTest.resources.srcDirs
//		scopes.TEST.plus += [ configurations.integrationTestCompile ]
//	}
//}

task verify(type: Test) {
	description = 'Runs the integration tests.'
	group = 'verification'
	testClassesDirs = sourceSets.itest.output.classesDirs
	classpath = sourceSets.itest.runtimeClasspath
	outputs.upToDateWhen { false }
	mustRunAfter test
}

check.dependsOn verify